#ifndef BW1_DECOMP_LH_KEY_INCLUDED_H
#define BW1_DECOMP_LH_KEY_INCLUDED_H

#include <assert.h> /* For static_assert */

enum LHKey
{
  LHKEY_1 = 0x2,
  LHKEY_2 = 0x3,
  LHKEY_3 = 0x4,
  LHKEY_4 = 0x5,
  LHKEY_5 = 0x6,
  LHKEY_6 = 0x7,
  LHKEY_7 = 0x8,
  LHKEY_8 = 0x9,
  LHKEY_9 = 0xa,
  LHKEY_0 = 0xb,
  LHKEY_MINUS = 0xc,
  LHKEY_EQUALS = 0xd,
  LHKEY_BACKSPACE = 0xe,
  LHKEY_TAB = 0xf,
  LHKEY_Q = 0x10,
  LHKEY_W = 0x11,
  LHKEY_E = 0x12,
  LHKEY_R = 0x13,
  LHKEY_T = 0x14,
  LHKEY_Y = 0x15,
  LHKEY_U = 0x16,
  LHKEY_I = 0x17,
  LHKEY_O = 0x18,
  LHKEY_P = 0x19,
  LHKEY_LEFT_BRACKET = 0x1a,
  LHKEY_RIGHT_BRACKET = 0x1b,
  LHKEY_RETURN = 0x1c,
  LHKEY_LEFT_CTRL = 0x1d,
  LHKEY_A = 0x1e,
  LHKEY_S = 0x1f,
  LHKEY_D = 0x20,
  LHKEY_F = 0x21,
  LHKEY_G = 0x22,
  LHKEY_H = 0x23,
  LHKEY_J = 0x24,
  LHKEY_K = 0x25,
  LHKEY_L = 0x26,
  LHKEY_SEMICOLON = 0x27,
  LHKEY_QUOTE = 0x28,
  LHKEY_TICK = 0x29,
  LEFT_SHIFT = 0x2a,
  LHKEY_BACK_SLASH = 0x2b,
  LHKEY_Z = 0x2c,
  LHKEY_X = 0x2d,
  LHKEY_C = 0x2e,
  LHKEY_V = 0x2f,
  LHKEY_B = 0x30,
  LHKEY_N = 0x31,
  LHKEY_M = 0x32,
  LHKEY_COMMA = 0x33,
  LHKEY_DOT = 0x34,
  LHKEY_FORWARD_SLASH = 0x35,
  LHKEY_RIGHT_SHIFT = 0x36,
  LHKEY_KEYPAD_MULT = 0x37,
  LHKEY_LEFT_ALT = 0x38,
  LHKEY_SPACE_BAT = 0x39,
  LHKEY_CAPS_LOCK = 0x3a,
  LHKEY_F1 = 0x3b,
  LHKEY_F2 = 0x3c,
  LHKEY_F3 = 0x3d,
  LHKEY_F4 = 0x3e,
  LHKEY_F5 = 0x3f,
  LHKEY_F6 = 0x40,
  LHKEY_F7 = 0x41,
  LHKEY_F8 = 0x42,
  LHKEY_F9 = 0x43,
  LHKEY_F10 = 0x44,
  LHKEY_PAUSE = 0x45,
  LHKEY_SCROLL_LOCK = 0x46,
  LHKEY_KEYPAD_7 = 0x47,
  LHKEY_KEYPAD_8 = 0x48,
  LHKEY_KEYPAD_9 = 0x49,
  LHKEY_KEYPAD_MINUS = 0x4a,
  LHKEY_KEYPAD_4 = 0x4b,
  LHKEY_KEYPAD_5 = 0x4c,
  LHKEY_KEYPAD_6 = 0x4d,
  LHKEY_KEYPAD_PLUS = 0x4e,
  LHKEY_KEYPAD_1 = 0x4f,
  LHKEY_KEYPAD_2 = 0x50,
  LHKEY_KEYPAD_3 = 0x51,
  LHKEY_KEYPAD_0 = 0x52,
  LHKEY_KEYPAD_DOT = 0x53,
  LHKEY_BACK_SLASH_2 = 0x56,
  LHKEY_F11 = 0x57,
  LHKEY_F12 = 0x58,
  LHKEY_RIGHT_RETURN = 0x9c,
  LHKEY_RIGHT_CTRL = 0x9d,
  LHKEY_MUTE = 0xa0,
  LHKEY_VOLUME_DOWN = 0xae,
  LHKEY_VOLUME_UP = 0xb0,
  LHKEY_RIGHT_KEYPAD_DIV = 0xb5,
  LHKEY_RIGHT_ALT = 0xb8,
  LHKEY_NUM_LOCK = 0xc5,
  LHKEY_HOME = 0xc7,
  LHKEY_PAGE_UP = 0xc9,
  LHKEY_UP = 0xc8,
  LHKEY_LEFT = 0xcb,
  LHKEY_RIGHT = 0xcd,
  LHKEY_END = 0xcf,
  LHKEY_DOWN = 0xd0,
  LHKEY_PAGE_DOWN = 0xd1,
  LHKEY_INSERT = 0xd2,
  LHKEY_DELETE = 0xd3,
  LHKEY_LEFT_SUPER = 0xdb,
  LHKEY_MENU = 0xdd,
  LHKEY_BRIGHTNESS_UP = 0xf8,
  LHKEY_BRIGHTNESS_DOWN = 0xf7,
  _LHKey_COUNT = 0xf9
};
static_assert(sizeof(enum LHKey) == 0x4, "Data type is of wrong size");

static const char* LHKey_strs[_LHKey_COUNT] = {
  "LHKey_0x0",
  "LHKey_0x1",
  "LHKEY_1",
  "LHKEY_2",
  "LHKEY_3",
  "LHKEY_4",
  "LHKEY_5",
  "LHKEY_6",
  "LHKEY_7",
  "LHKEY_8",
  "LHKEY_9",
  "LHKEY_0",
  "LHKEY_MINUS",
  "LHKEY_EQUALS",
  "LHKEY_BACKSPACE",
  "LHKEY_TAB",
  "LHKEY_Q",
  "LHKEY_W",
  "LHKEY_E",
  "LHKEY_R",
  "LHKEY_T",
  "LHKEY_Y",
  "LHKEY_U",
  "LHKEY_I",
  "LHKEY_O",
  "LHKEY_P",
  "LHKEY_LEFT_BRACKET",
  "LHKEY_RIGHT_BRACKET",
  "LHKEY_RETURN",
  "LHKEY_LEFT_CTRL",
  "LHKEY_A",
  "LHKEY_S",
  "LHKEY_D",
  "LHKEY_F",
  "LHKEY_G",
  "LHKEY_H",
  "LHKEY_J",
  "LHKEY_K",
  "LHKEY_L",
  "LHKEY_SEMICOLON",
  "LHKEY_QUOTE",
  "LHKEY_TICK",
  "LEFT_SHIFT",
  "LHKEY_BACK_SLASH",
  "LHKEY_Z",
  "LHKEY_X",
  "LHKEY_C",
  "LHKEY_V",
  "LHKEY_B",
  "LHKEY_N",
  "LHKEY_M",
  "LHKEY_COMMA",
  "LHKEY_DOT",
  "LHKEY_FORWARD_SLASH",
  "LHKEY_RIGHT_SHIFT",
  "LHKEY_KEYPAD_MULT",
  "LHKEY_LEFT_ALT",
  "LHKEY_SPACE_BAT",
  "LHKEY_CAPS_LOCK",
  "LHKEY_F1",
  "LHKEY_F2",
  "LHKEY_F3",
  "LHKEY_F4",
  "LHKEY_F5",
  "LHKEY_F6",
  "LHKEY_F7",
  "LHKEY_F8",
  "LHKEY_F9",
  "LHKEY_F10",
  "LHKEY_PAUSE",
  "LHKEY_SCROLL_LOCK",
  "LHKEY_KEYPAD_7",
  "LHKEY_KEYPAD_8",
  "LHKEY_KEYPAD_9",
  "LHKEY_KEYPAD_MINUS",
  "LHKEY_KEYPAD_4",
  "LHKEY_KEYPAD_5",
  "LHKEY_KEYPAD_6",
  "LHKEY_KEYPAD_PLUS",
  "LHKEY_KEYPAD_1",
  "LHKEY_KEYPAD_2",
  "LHKEY_KEYPAD_3",
  "LHKEY_KEYPAD_0",
  "LHKEY_KEYPAD_DOT",
  "LHKey_0x54",
  "LHKey_0x55",
  "LHKEY_BACK_SLASH_2",
  "LHKEY_F11",
  "LHKEY_F12",
  "LHKey_0x59",
  "LHKey_0x5a",
  "LHKey_0x5b",
  "LHKey_0x5c",
  "LHKey_0x5d",
  "LHKey_0x5e",
  "LHKey_0x5f",
  "LHKey_0x60",
  "LHKey_0x61",
  "LHKey_0x62",
  "LHKey_0x63",
  "LHKey_0x64",
  "LHKey_0x65",
  "LHKey_0x66",
  "LHKey_0x67",
  "LHKey_0x68",
  "LHKey_0x69",
  "LHKey_0x6a",
  "LHKey_0x6b",
  "LHKey_0x6c",
  "LHKey_0x6d",
  "LHKey_0x6e",
  "LHKey_0x6f",
  "LHKey_0x70",
  "LHKey_0x71",
  "LHKey_0x72",
  "LHKey_0x73",
  "LHKey_0x74",
  "LHKey_0x75",
  "LHKey_0x76",
  "LHKey_0x77",
  "LHKey_0x78",
  "LHKey_0x79",
  "LHKey_0x7a",
  "LHKey_0x7b",
  "LHKey_0x7c",
  "LHKey_0x7d",
  "LHKey_0x7e",
  "LHKey_0x7f",
  "LHKey_0x80",
  "LHKey_0x81",
  "LHKey_0x82",
  "LHKey_0x83",
  "LHKey_0x84",
  "LHKey_0x85",
  "LHKey_0x86",
  "LHKey_0x87",
  "LHKey_0x88",
  "LHKey_0x89",
  "LHKey_0x8a",
  "LHKey_0x8b",
  "LHKey_0x8c",
  "LHKey_0x8d",
  "LHKey_0x8e",
  "LHKey_0x8f",
  "LHKey_0x90",
  "LHKey_0x91",
  "LHKey_0x92",
  "LHKey_0x93",
  "LHKey_0x94",
  "LHKey_0x95",
  "LHKey_0x96",
  "LHKey_0x97",
  "LHKey_0x98",
  "LHKey_0x99",
  "LHKey_0x9a",
  "LHKey_0x9b",
  "LHKEY_RIGHT_RETURN",
  "LHKEY_RIGHT_CTRL",
  "LHKey_0x9e",
  "LHKey_0x9f",
  "LHKEY_MUTE",
  "LHKey_0xa1",
  "LHKey_0xa2",
  "LHKey_0xa3",
  "LHKey_0xa4",
  "LHKey_0xa5",
  "LHKey_0xa6",
  "LHKey_0xa7",
  "LHKey_0xa8",
  "LHKey_0xa9",
  "LHKey_0xaa",
  "LHKey_0xab",
  "LHKey_0xac",
  "LHKey_0xad",
  "LHKEY_VOLUME_DOWN",
  "LHKey_0xaf",
  "LHKEY_VOLUME_UP",
  "LHKey_0xb1",
  "LHKey_0xb2",
  "LHKey_0xb3",
  "LHKey_0xb4",
  "LHKEY_RIGHT_KEYPAD_DIV",
  "LHKey_0xb6",
  "LHKey_0xb7",
  "LHKEY_RIGHT_ALT",
  "LHKey_0xb9",
  "LHKey_0xba",
  "LHKey_0xbb",
  "LHKey_0xbc",
  "LHKey_0xbd",
  "LHKey_0xbe",
  "LHKey_0xbf",
  "LHKey_0xc0",
  "LHKey_0xc1",
  "LHKey_0xc2",
  "LHKey_0xc3",
  "LHKey_0xc4",
  "LHKEY_NUM_LOCK",
  "LHKey_0xc6",
  "LHKEY_HOME",
  "LHKEY_UP",
  "LHKEY_PAGE_UP",
  "LHKey_0xca",
  "LHKEY_LEFT",
  "LHKey_0xcc",
  "LHKEY_RIGHT",
  "LHKey_0xce",
  "LHKEY_END",
  "LHKEY_DOWN",
  "LHKEY_PAGE_DOWN",
  "LHKEY_INSERT",
  "LHKEY_DELETE",
  "LHKey_0xd4",
  "LHKey_0xd5",
  "LHKey_0xd6",
  "LHKey_0xd7",
  "LHKey_0xd8",
  "LHKey_0xd9",
  "LHKey_0xda",
  "LHKEY_LEFT_SUPER",
  "LHKey_0xdc",
  "LHKEY_MENU",
  "LHKey_0xde",
  "LHKey_0xdf",
  "LHKey_0xe0",
  "LHKey_0xe1",
  "LHKey_0xe2",
  "LHKey_0xe3",
  "LHKey_0xe4",
  "LHKey_0xe5",
  "LHKey_0xe6",
  "LHKey_0xe7",
  "LHKey_0xe8",
  "LHKey_0xe9",
  "LHKey_0xea",
  "LHKey_0xeb",
  "LHKey_0xec",
  "LHKey_0xed",
  "LHKey_0xee",
  "LHKey_0xef",
  "LHKey_0xf0",
  "LHKey_0xf1",
  "LHKey_0xf2",
  "LHKey_0xf3",
  "LHKey_0xf4",
  "LHKey_0xf5",
  "LHKey_0xf6",
  "LHKEY_BRIGHTNESS_DOWN",
  "LHKEY_BRIGHTNESS_UP",
};

enum LHKeyMod
{
  LHKEYMOD_SHIFT = 0x10,
  LHKEYMOD_CTRL = 0x20,
  LHKEYMOD_ALT = 0x40
};
static_assert(sizeof(enum LHKeyMod) == 0x4, "Data type is of wrong size");

#endif /* BW1_DECOMP_LH_KEY_INCLUDED_H */
