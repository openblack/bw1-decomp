import struct

def quick_string_search(program, search_string):
    memory = program.getMemory()

    found_string_addr = memory.findBytes(memory.getMinAddress(), "\00" + search_string + "\00", None, True, None)
    if found_string_addr:
        addr_bytes = struct.pack('>I', found_string_addr.getOffset() + 1)
        rtti_addr = memory.findBytes(memory.getMinAddress(), addr_bytes, None, True, None)
        if rtti_addr:
            rtti_addr_bytes = struct.pack('>I', rtti_addr.getOffset())
            vtable_addr = memory.findBytes(memory.getMinAddress(), rtti_addr_bytes, None, True, None)
            return (search_string, rtti_addr, vtable_addr)
    return None

def main(program):
    search_strings = {
        "EffectValues",
        "FireFly",
        "GameOSFile",
        "GSoundMap",
        "PhysicsObject",
        "Mobile",
        "LandscapeVortex",
        "PlannedTownCentre",
        "ValueSpinner",
        "AnimatedStatic",
        "WorshipSite",
        "Whale",
        "WeatherInfo",
        "GSLobbyBox",
        "Pot",
        "HistoryBox",
        "LoadingBox",
        "CreaturePreviousLesson",
        "TownStats",
        "Waypoint",
        "SetupSlider",
        "GClimate",
        "GFootpathNode",
        "GInterfaceCollide",
        "FelledTree",
        "PileFood",
        "HelpProfile",
        "CreatureExplorationMap",
        "MultiMapFixed",
        "HandStateCamera",
        "SpellShield",
        "GLanguage",
        "CameraModeFree",
        "Feature",
        "TerrainMapTypeInfo",
        "GObjectInfo",
        "CitadelHeart",
        "ScriptDLL",
        "ProfileEditor",
        "GatheringBox",
        "HelpSpirit",
        "GStreetLantern",
        "InnerCamera",
        "SetupTabButton",
        "Rock",
        "StoragePit",
        "NewProfileBox",
        "TownDesireFlags",
        "CDBox",
        "SetupMP3Button",
        "SetupControl",
        "HandStatePlayAnim",
        "GWaterfall",
        "DialogBoxImmersion",
        "CreatureMentalDebug",
        "GGame",
        "BuildingSite",
        "FixedObject",
        "SingleMapFixed",
        "GKeyBuffer",
        "HandStateNormal",
        "PuzzleGame",
        "GMagicEffectInfo",
        "GPrayerIconInfo",
        "MPFELogin",
        "MPFELoginDatabase",
        "GJPSysInterface",
        "EndGameBox",
        "GBigForestInfo",
        "PileWood",
        "Forest",
        "MPFEChannelSelector",
        "Workshop",
        "MagicFireBall",
        "GAudio",
        "CameraModeNew3",
        "GLeashStatus",
        "DeadTree",
        "ChallengeRoom",
        "TempleRoom",
        "GTreeInfo",
        "CreatureDamageMap",
        "CreaturePhysical",
        "CameraModeFollowHeading",
        "DialogBoxOptions",
        "GSingleMapFixedInfo",
        "CreatureDesires",
        "InfluenceRing",
        "GMobileObjectInfo",
        "CameraModeNew",
        "GPlayer",
        "SetupPicture",
        "RegisterBox",
        "CreatureRoomCamera",
        "FishFarm",
        "MainMenu",
        "GVillagerStateTableInfo",
        "Flock",
        "HandStateGrain",
        "Spell",
        "PileResource",
        "ShowNeedsVisuals",
        "GCamera",
        "PotStructure",
        "CreatureVisionState",
        "CreatureInfo",
        "TownCentre",
        "HelpText",
        "CameraModePath",
        "DataForScriptRemind",
        "Living",
        "CameraModeTwoObjects",
        "Container",
        "CameraModeNew1",
        "Mist",
        "GameThing",
        "ShowNeeds",
        "GAlignment",
        "ChannelBox",
        "DanceGroup",
        "DataPath",
        "CreaturePlan",
        "PHandFX",
        "MPFEChooseConnection",
        "GestureSystemDataList",
        "GTerrainMap",
        "GSpecialVillagerInfo",
        "GStream",
        "SkipBox",
        "SpellWater",
        "CitadelPart",
        "HandStateHolding",
        "Citadel",
        "HandStateCreature",
        "ScriptHighlight",
        "MobileStatic",
        "OneOffSpellSeed",
        "GGuidance",
        "BigForest",
        "SpecialVillager",
        "PSysManager",
        "TownDesire",
        "GBallInfo",
        "WeatherThing",
        "GameThingWithPos",
        "CameraModeNew2",
        "Creature",
        "FireEffect",
        "CreatureAgenda",
        "GInterfaceStatus",
        "RenderParticle",
        "GFootpath",
        "GWorshipSiteInfo",
        "CreatureSubAction",
        "CreatureSubActionAgenda",
        "GScript",
        "InterfaceHandState",
        "SpellWithObjects",
        "CameraModeCtrInteract",
        "Town",
        "GTownDesireInfo",
        "Reaction",
        "ScriptMarker",
        "StatsBox",
        "GParticleContainer",
        "CHand",
        "GroupBehaviour",
        "Scaffold",
        "GArena",
        "TattooEditor",
        "TownArtifact",
        "SetupStaticTextNoHit",
        "CreatureBeliefList",
        "AllocatedBeliefList",
        "CreatureBeliefs",
        "WorshipTotem",
        "Field",
        "GEffectInfo",
        "CreatureMental",
        "SetupVBarGraph",
        "GFootpathLinkSave",
        "SetupHLineGraph",
        "GPlayerInfo",
        "Fragment",
        "GShowNeedsInfo",
        "StandardBuildingSite",
        "SaveGameRoom",
        "HandStateInvisible",
        "MobileWallHug",
        "HelpSystem",
        "DancePathInfo",
        "Football",
        "GInterface",
        "Ball",
        "SetupColourPicker",
        "Cow",
        "SetupStaticText",
        "SoundTag",
        "Reward",
        "SpellSeedGraphic",
        "SetupMultiList",
        "GData",
        "SpellIcon",
        "Object",
        "SpellSeed",
        "CameraMode",
        "GMagicInfo",
        "PlannedMultiMapFixed",
        "CreatureObjectsInspected",
        "StatsDatabase",
        "GMobileStaticInfo",
        "GVirtualInfluence",
        "HandStateMultiPickUp",
        "GTribeInfo",
        "PSysInterface",
        "GFootpathLink",
        "SetupList",
        "Creche",
        "GInterfaceMessageBuffer",
        "MultiplayerDatabase",
        "GameStats",
        "PictureRoomBase",
        "LocalBase",
        "CreatureAttitudeToPlayer",
        "GSpellIconInfo",
        "GGameInfo",
        "HandStateCitadel",
        "GCameraEditor",
        "CreatureLearning",
        "GFootpathFinder",
        "Morphable",
        "CreatureCommandState",
        "SetupBigButton",
        "HandStateTug",
        "GTotemStatueInfo",
        "SkirmishGameBox",
        "DanceKeyFrame",
        "CameraModeCitadel",
        "GVillagerInfo",
        "GestureSystem",
        "GestureSystemData",
        "SetupBox",
        "CameraModeFollow",
        "TotemStatue",
        "SetupButton",
        "MultiplayerConditionBox",
        "DialogBoxSaveMessage",
        "GTownInfo",
        "GBaseInfo",
        "BaseInfo",
        "LoginBox",
        "Totem",
        "Tree",
        "HandStateTotem",
        "BWGameSpy",
        "SetupEdit",
        "GStreetLight",
        "SetupCheckBox",
        "CreatureDatabase",
        "TownSpellIcon",
        "CameraModeDance",
        "MiniDialogBoxOptions",
        "PSysBase",
        "MapShield",
        "CameraModeFlyAndClick",
        "Villager",
        "MPFEDatabase",
        "DialogBoxKeyBinding",
        "ReactionInfo",
        "GDanceInfo",
        "CreatureMimicState",
        "TerrainMapInfo",
        "Wonder",
        "StartGameBox",
        "WorshipSpellIcon",
        "GFieldTypeInfo",
        "Animal",
        "Dance",
        "SetupHSBarGraph",
        "LobbyBox",
        "CreatureBelief",
        "VillagerName",
        "CreaturePreviousActions",
        "MobileObject",
        "GInterfaceFlags",
        "LHDLL",
        "LHFile",
        "LHOSFile",
        "LHReleasedFile",
        "LHReleasedOSFile",
        "LH3DSpriteObject",
        "Prss",
        "LH3DObject",
        "LH3DStaticMorphableObject",
        "LH3DStaticObject",
        "LH3DMeshedObject",
        "LH3DMist",
        "LH3DAnimatedObject",
        "LH3DCitadel",
        "LH3DComplexObject",
        "Heap",
    }
    rtti_results = []
    vtable_results = []
    failed = []

    for i, s in enumerate(search_strings):
        print("%d/%d" % (i, len(search_strings)))
        result = quick_string_search(program, s)
        if result:
            class_name, rtti_addr, vtable_addr = result
            rtti_results.append("{}\t{}".format(class_name, rtti_addr))
            if vtable_addr:
                vtable_results.append("{}\t{}".format(class_name, vtable_addr))
            else:
                failed.append("{}\tno_vtable".format(class_name))
        else:
            failed.append("{}\tnot_found".format(s))

    print("RTTI_TABLE:")
    for line in rtti_results:
        print(line)

    print("\nVTABLE_TABLE:")
    for line in vtable_results:
        print(line)

    print("\nFAILED:")
    for line in failed:
        print(line)
