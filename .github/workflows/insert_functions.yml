name: Insert Functions

on:
  issues:
    types: [opened, edited]  # Trigger when a new issue is created or edited

jobs:
  insert-functions:
    if: contains(github.event.issue.title, '[INSERT FUNCTIONS]')
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check for CSV code block in issue body
      id: extract_csv
      shell: bash
      env:
        ISSUE_BODY: ${{ github.event.issue.body }}
      run: |
        echo "Checking issue body for CSV code block..."

        csv_block=$(printf '%s\n' "$ISSUE_BODY" | awk '/```csv/{flag=1;next}/```/{flag=0}flag')

        if [ -z "$csv_block" ]; then
          echo "‚ùå No CSV code block found in issue body."
          exit 1
        fi

        printf '%s\n' "$csv_block" > "manual_analysis_functions.csv"

        echo "‚úÖ Saved CSV to $workspace_path"
        head -n 10 "manual_analysis_functions.csv"

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install -r scripts/headers/requirements.txt

    - name: Install Ninja
      uses: seanmiddleditch/gha-setup-ninja@master

    - name: Download patched llvm project
      uses: robinraju/release-downloader@v1
      with:
        repository: 'openblack/llvm-project'
        tag: 'bw1-decomp-010'
        fileName: 'llvm-${{ matrix.os }}.zip'
        extract: true
        out-file-path: 'llvm'

    - name: Ensure LLVM binaries are executable
      if: ${{ runner.os != 'Windows' }}
      run: chmod -R +x llvm/bin

    - if: ${{ runner.os == 'Windows' }}
      run: |
        C:/msys64/usr/bin/pacman -Sy --noconfirm mingw-w64-clang-x86_64-headers-git

    - if: ${{ runner.os != 'Windows' }}
      run: |
        sudo apt install -y mingw-w64 libc6-dev-i386-cross

    - name: Set path for LLVM binaries in env
      shell: bash
      run: |
        echo "CLANG_INCLUDE=$(echo '${{ github.workspace }}/llvm/lib/clang/20/include;/usr/i686-w64-mingw32/include' | sed 's,\\,/,g')" >> $GITHUB_ENV
        echo "LLVM_BINARIES=$(echo '${{ github.workspace }}'/llvm/bin | sed 's,\\,/,g')" >> $GITHUB_ENV

    - name: Run analyze_headers.py script
      run: python scripts/headers/analyze_headers.py

    - name: Run insert_functions.py
      run: python scripts/insert_functions.py manual_analysis_functions.csv extracted_reversing_data_bw_141.json

    - name: Run generate_headers.py script
      run: python scripts/headers/bw1_decomp_gen/generate_headers.py

    - run: git diff

    - name: Build bw1-decomp project
      run: |
        cmake -G Ninja -Ssrc -Bbuild -DCMAKE_BUILD_TYPE=Release -DLLVM_BINARIES_DIR="${{env.LLVM_BINARIES}}" -DCMAKE_C_STANDARD_INCLUDE_DIRECTORIES="${{env.CLANG_INCLUDE}}"
        cmake --build build

    - name: Verify MD5 sum of resulting binary
      run: |
        expected_md5="174b1a64e74b2321f3c38ccc8a511e78"
        actual_md5=$(md5sum "${{ github.workspace }}/build/runblack-reassembled.exe" | awk '{ print $1 }' | sed 's/^\\//')

        if [ "$expected_md5" != "$actual_md5" ]; then
        echo "Error: MD5 sum mismatch. Expected $expected_md5 but got $actual_md5"
        exit 1
        else
        echo "MD5 sum matches: $actual_md5"
        fi
      shell: bash

    - name: Commit and create pull request
      shell: bash
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        ISSUE_AUTHOR: ${{ github.event.issue.user.login }}
        ISSUE_NUMBER: ${{ github.event.issue.number }}
        ISSUE_TITLE: ${{ github.event.issue.title }}
      run: |
        git config user.name "${ISSUE_AUTHOR}"
        git config user.email "${ISSUE_AUTHOR}@users.noreply.github.com"

        # Stage changes to header and asm files, ignore other changes
        git add -u
        git reset manual_analysis_functions.csv extracted_reversing_data_bw_141.json globals.h libs/ifc/README.md || true

        # Exit if nothing to commit
        if git diff --cached --quiet; then
          echo "No changes to commit."
          exit 0
        fi

        branch="insert-funcs-issue-${ISSUE_NUMBER}"
        git checkout -b "$branch"

        # Get a clean PR title from the issue title
        clean_title=$(echo "${ISSUE_TITLE}" | sed -E 's/^\[INSERT[[:space:]_]*FUNCTIONS\][[:space:]]*//I')

        git commit -m "Insert functions from issue #${ISSUE_NUMBER}: ${clean_title}"
        git push --force origin "$branch"

        # Try to create the PR ‚Äî handle if it already exists
        if gh pr view "$branch" --repo "${GITHUB_REPOSITORY}" &>/dev/null; then
          echo "‚ÑπÔ∏è PR already exists for branch '$branch'. Updating body and labels..."

          gh pr edit "$branch" \
            --title "Insert functions: ${clean_title}" \
            --body "Automatically updated from [#${ISSUE_NUMBER}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/issues/${ISSUE_NUMBER}) by @${ISSUE_AUTHOR}

        Closes #${ISSUE_NUMBER}" \
            --add-label "auto-pr" \
            --repo "${GITHUB_REPOSITORY}"
        else
          echo "üöÄ Creating new pull request..."
          gh pr create \
            --title "Insert functions: ${clean_title}" \
            --body "Automatically generated from [#${ISSUE_NUMBER}](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/issues/${ISSUE_NUMBER}) by @${ISSUE_AUTHOR}

        Closes #${ISSUE_NUMBER}" \
            --head "$branch" \
            --base main \
            --repo "${GITHUB_REPOSITORY}" \
            --label "auto-pr" \
            --assignee "${ISSUE_AUTHOR}" \
            --draft=false
        fi
